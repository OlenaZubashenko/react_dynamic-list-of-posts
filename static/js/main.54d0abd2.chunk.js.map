{"version":3,"sources":["api.ts","Components/Post/Post.tsx","Components/User/User.tsx","Components/Comment/Comment.tsx","Components/CommentList/CommentList.tsx","Components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["get","url","a","fetch","then","resolve","json","response","getElements","Promise","all","Post","post","title","body","User","user","address","street","suite","city","zipcode","name","email","Comment","comment","CommentList","comments","map","key","id","PostList","TempUser","posts","users","noUser","geo","lat","lng","username","className","find","userId","undefined","filter","postId","App","useState","setPosts","filteredPosts","setFilteredPosts","setUsers","setComments","isLoaded","setIsLoaded","isInitialized","setIsInitialized","filterValue","setFilterValue","useEffect","e","includes","onChange","event","target","value","ChangeHandler","disabled","length","type","onClick","tempPosts","tempUsers","TempComments","ReactDOM","render","document","getElementById"],"mappings":"uPAIMA,EAAG,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACaC,MAAMF,GAAKG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UADhD,cACJC,EADI,yBAGHA,GAHG,2CAAH,sDAMIC,EAAW,uCAAG,4BAAAN,EAAA,sEACFO,QAAQC,IAAI,CACjCV,EAZa,8CAabA,EAZa,8CAabA,EAZgB,mDAQO,cACnBO,EADmB,yBAOlBA,GAPkB,2CAAH,qDCHXI,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnC,6BACE,4BACGA,EAAKC,OAER,2BACGD,EAAKE,QCPCC,EAAwB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChCC,EAAO,UAAMD,EAAKC,QAAQC,OAAnB,eACXF,EAAKC,QAAQE,MADF,eAEXH,EAAKC,QAAQG,KAFF,eAGXJ,EAAKC,QAAQI,SAEf,OACE,6BACE,4BACGL,EAAKM,MAER,2BACGN,EAAKO,OAER,2BACGN,KCfIO,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACtC,6BACE,4BACGA,EAAQH,MAEX,2BACGG,EAAQX,MAEX,2BACGW,EAAQF,SCPFG,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC1C,4BACGA,EAASC,KAAI,SAAAH,GAAO,OACnB,wBAAII,IAAKJ,EAAQK,IACf,kBAAC,EAAD,CAASL,QAASA,UCAbM,EAA4B,SAAC,GAAgC,IAkBpEC,EAlBsCC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOP,EAAe,EAAfA,SAClDQ,EAAmB,CACvBlB,QAAS,CACPG,KAAM,GACNF,OAAQ,GACRG,QAAS,GACTF,MAAO,GACPiB,IAAK,CACHC,IAAK,GACLC,IAAK,KAGTf,MAAO,GACPO,IAAK,EACLR,KAAM,GACNiB,SAAU,IAKZ,OACE,wBAAIC,UAAU,cACXP,EAAML,KAAI,SAAAhB,GAGT,OAFAoB,EAAWE,EAAMO,MAAK,SAAAzB,GAAI,OAAIA,EAAKc,KAAOlB,EAAK8B,UAG7C,wBAAIb,IAAKjB,EAAKkB,GAAIU,UAAU,cAC1B,6BACE,kBAAC,EAAD,CAAM5B,KAAMA,IACZ,kBAAC,EAAD,CAAMI,UAAmB2B,IAAbX,EAAyBG,EAASH,IAC9C,kBAAC,EAAD,CACEL,SAAUA,EAASiB,QAAO,SAAAnB,GAAO,OAAIA,EAAQoB,SAAWjC,EAAKkB,eC8B9DgB,EAnEH,WAAO,IAAD,EACUC,mBAAqB,IAD/B,mBACTd,EADS,KACFe,EADE,OAE0BD,mBAAqB,IAF/C,mBAETE,EAFS,KAEMC,EAFN,OAGUH,mBAAqB,IAH/B,mBAGTb,EAHS,KAGFiB,EAHE,OAIgBJ,mBAAwB,IAJxC,mBAITpB,EAJS,KAICyB,EAJD,OAKgBL,oBAAS,GALzB,mBAKTM,EALS,KAKCC,EALD,OAM0BP,oBAAS,GANnC,mBAMTQ,EANS,KAMMC,EANN,OAOsBT,mBAAS,IAP/B,mBAOTU,EAPS,KAOIC,EAPJ,KAgChB,OALAC,qBAAU,WACRT,EAAiBjB,EAAMW,QAAO,SAAAgB,GAAC,OAAIA,EAAE/C,MAAMgD,SAASJ,IAC7CG,EAAE9C,KAAK+C,SAASJ,SACtB,CAACA,IAGF,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,uBACb,2BACEsB,SAAU,SAACC,GAAD,OAdlB,SAAuBA,GACrBL,EAAeK,EAAMC,OAAOC,OAaDC,CAAcH,IACnCE,MAAOR,EACPjB,UAAU,eACV2B,UAAWd,KAGG,IAAjBpB,EAAMmC,QACL,kBAAC,EAAD,CACEnC,MAAOgB,EACPf,MAAOA,EACPP,SAAUA,KAGZ4B,IAAkBF,GAClB,4BACEgB,KAAK,SACLC,QA3CR,WACEd,GAAiB,GACjBhD,IAAcJ,MAAK,SAAAC,GAAY,IAAD,cACiBA,EADjB,GACrBkE,EADqB,KACVC,EADU,KACCC,EADD,KAG5BzB,EAASuB,GACTrB,EAAiBqB,GACjBpB,EAASqB,GACTpB,EAAYqB,GACZnB,GAAY,OAmCRd,UAAU,2BAHZ,QAQAe,IAAkBF,GAClB,uBAAGb,UAAU,gBAAb,gBC5DRkC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.54d0abd2.chunk.js","sourcesContent":["const urlPosts = 'https://jsonplaceholder.typicode.com/posts';\nconst urlUsers = 'https://jsonplaceholder.typicode.com/users';\nconst urlComments = 'https://jsonplaceholder.typicode.com/comments';\n\nconst get = async (url: string) => {\n  const response = await fetch(url).then(resolve => resolve.json());\n\n  return response;\n};\n\nexport const getElements = async () => {\n  const response = await Promise.all([\n    get(urlPosts),\n    get(urlUsers),\n    get(urlComments),\n  ]);\n\n  return response;\n};\n","\nimport React from 'react';\n\ninterface Props {\n  post: PostType;\n}\n\nexport const Post: React.FC<Props> = ({ post }) => (\n  <div>\n    <h1>\n      {post.title}\n    </h1>\n    <p>\n      {post.body}\n    </p>\n  </div>\n);\n","import React from 'react';\n\ninterface Props {\n  user: UserType;\n}\n\nexport const User: React.FC<Props> = ({ user }) => {\n  const address = `${user.address.street}\n  ${user.address.suite}\n  ${user.address.city}\n  ${user.address.zipcode}`;\n\n  return (\n    <div>\n      <h2>\n        {user.name}\n      </h2>\n      <p>\n        {user.email}\n      </p>\n      <p>\n        {address}\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  comment: CommentType;\n}\n\nexport const Comment: React.FC<Props> = ({ comment }) => (\n  <div>\n    <h3>\n      {comment.name}\n    </h3>\n    <p>\n      {comment.body}\n    </p>\n    <p>\n      {comment.email}\n    </p>\n  </div>\n);\n","\nimport React from 'react';\nimport { Comment } from '../Comment/Comment';\n\ntype Props = {\n  comments: CommentType[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <ul>\n    {comments.map(comment => (\n      <li key={comment.id}>\n        <Comment comment={comment} />\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\n\nimport { Post } from '../Post/Post';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface Props {\n  posts: PostType[];\n  users: UserType[];\n  comments: CommentType[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts, users, comments }) => {\n  const noUser: UserType = {\n    address: {\n      city: '',\n      street: '',\n      zipcode: '',\n      suite: '',\n      geo: {\n        lat: '',\n        lng: '',\n      },\n    },\n    email: '',\n    id: -1,\n    name: '',\n    username: '',\n  };\n\n  let TempUser: UserType | undefined;\n\n  return (\n    <ul className=\"post__list\">\n      {posts.map(post => {\n        TempUser = users.find(user => user.id === post.userId);\n\n        return (\n          <li key={post.id} className=\"post__item\">\n            <div>\n              <Post post={post} />\n              <User user={TempUser === undefined ? noUser : TempUser} />\n              <CommentList\n                comments={comments.filter(comment => comment.postId === post.id)}\n              />\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getElements } from './api';\nimport { PostList } from './Components/PostList/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<PostType[]>([]);\n  const [filteredPosts, setFilteredPosts] = useState<PostType[]>([]);\n  const [users, setUsers] = useState<UserType[]>([]);\n  const [comments, setComments] = useState<CommentType[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [filterValue, setFilterValue] = useState('');\n\n  function LoadData() {\n    setIsInitialized(true);\n    getElements().then(resolve => {\n      const [tempPosts, tempUsers, TempComments] = resolve;\n\n      setPosts(tempPosts);\n      setFilteredPosts(tempPosts);\n      setUsers(tempUsers);\n      setComments(TempComments);\n      setIsLoaded(true);\n    });\n  }\n\n  function ChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\n    setFilterValue(event.target.value);\n  }\n\n\n  useEffect(() => {\n    setFilteredPosts(posts.filter(e => e.title.includes(filterValue)\n        || e.body.includes(filterValue)));\n  }, [filterValue]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"post__input-wrapper\">\n        <input\n          onChange={(event) => ChangeHandler(event)}\n          value={filterValue}\n          className=\"form-control\"\n          disabled={!isLoaded}\n        />\n      </div>\n      {posts.length !== 0 && (\n        <PostList\n          posts={filteredPosts}\n          users={users}\n          comments={comments}\n        />\n      )}\n      {!isInitialized && !isLoaded && (\n        <button\n          type=\"button\"\n          onClick={LoadData}\n          className=\"btn btn-outline-warning\"\n        >\n          Load\n        </button>\n      )}\n      {(isInitialized && !isLoaded && (\n        <p className=\"text-success\">\n          Loading...\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}